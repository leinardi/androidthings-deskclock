/*
 * Copyright 2018 Roberto Leinardi.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply from: rootProject.file('checkstyle.gradle')

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        applicationId "com.leinardi.android.things.deskclock"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode build_versions.version_code
        versionName build_versions.version_name
        buildConfigField "String", "WUNDERGROUND_API_KEY", "\"${project.hasProperty('wundergroundApiKey') ? wundergroundApiKey : ""}\""
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility build_versions.java_version
        targetCompatibility build_versions.java_version
    }

    def isKeystoreInfoAvailable = file(KEYSTORE_PATH).exists() && file(KEYSTORE_PROPERTIES_PATH).exists()

    signingConfigs {
        if (isKeystoreInfoAvailable) {
            release {
                Properties props = new Properties()
                props.load(new FileInputStream(file(KEYSTORE_PROPERTIES_PATH)))
                storeFile file(KEYSTORE_PATH)
                storePassword props['store.password']
                keyAlias props['key.alias']
                keyPassword props['key.password']
            }
        }
    }

    buildTypes {
        if (isKeystoreInfoAvailable) {
            release {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }
        }
    }

}

dependencies {
    compileOnly deps.androidthings
    implementation deps.support.annotations
    implementation deps.support.app_compat
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.timber
    implementation deps.driver_epaperdriverhat
    implementation deps.driver_bmx280

    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support
    annotationProcessor deps.dagger.android_support_compiler
    annotationProcessor deps.dagger.compiler

    implementation deps.rx_android
    implementation deps.rxjava2

    implementation deps.okhttp3_logging_interceptor
    implementation deps.retrofit.adapter_rxjava2
    implementation deps.retrofit.moshi
    implementation deps.retrofit.runtime
}
